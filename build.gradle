/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {

    // Define the versions of the library and its dependencies.
    // As long as `buildscript` section is always evaluated first, we need to apply
    // `version.gradle` explicitly here.
    apply from: "version.gradle"
    apply from: "$rootDir/config/gradle/dependencies.gradle"

    repositories {
        google()
        maven { url = repos.gradlePlugins }
        maven { url = repos.spine }
        maven { url = repos.spineSnapshots }
        mavenLocal()
    }

    dependencies {
        classpath deps.build.guava
        classpath (deps.build.gradlePlugins.errorProne) {
            exclude group: 'com.google.guava'
        }
    }
}

apply from: 'version.gradle'

ext {
    credentialsPropertyFile = 'credentials.properties'
    runsOnWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()

    projectsToPublish = ['datastore']
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'

    group = 'io.spine.gcloud'
    version = project.versionToPublish
}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'maven-publish'

    project.ext {
        sourcesRootDir = "${projectDir}/src"
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    
    repositories {
        google()
        maven { url = repos.gradlePlugins }
        maven { url = repos.spine }
        maven { url = repos.spineSnapshots }
        mavenLocal()
    }

    dependencies {
        errorprone deps.build.errorProneCore
        errorproneJavac deps.build.errorProneJavac
        // For dependencies config. based on version of Java, see:
        //  https://github.com/epeee/junit-jupiter-extension-testing/blob/57b7ba75ab64ed8c229d2a5b14a954d6ae359189/gradle/errorprone.gradle

        implementation group: 'io.spine', name: "spine-server", version: spineCoreVersion

        testImplementation group: 'io.spine', name: "spine-testutil-server", version: spineCoreVersion
        testImplementation group: 'io.spine', name: "spine-server", version: spineCoreVersion, classifier: "test"

        testImplementation deps.test.junit5Api
        testImplementation deps.test.junit5Runner

        testImplementation deps.test.hamcrest
        testImplementation deps.test.mockito
        testImplementation deps.test.guavaTestlib

        testRuntime deps.test.slf4j
    }

    apply from: "$rootDir/config/gradle/test-output.gradle"

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    }

    apply from: deps.scripts.testOutput
    apply from: deps.scripts.javadocOptions
    apply from: deps.scripts.javacArgs

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier = "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier = "test"
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from("$projectDir/build/docs/javadoc")
        classifier = "javadoc"
    }
}

task startDatastore {
    description = "Starts local in-memory datastore using scripts from ./scripts folder."
    group = "Build Setup"

    doLast {
        // Start Datastore emulator with the CLI command.
        ".${File.separatorChar}scripts${File.separatorChar}start-datastore.${runsOnWindows ? 'bat' : 'sh'}".execute()
    }
}

tasks["check"].dependsOn startDatastore

apply from: "$rootDir/config/gradle/jacoco.gradle"
apply from: "$rootDir/config/gradle/publish.gradle"
