project.ext {
    SPINE_VERSION = '0.8.34-SNAPSHOT'
    GAE_JAVA_VERSION = "0.8.34.1-SNAPSHOT"
    PROTOBUF_VERSION = '3.2.0'
    SLf4J_VERSION = "1.7.21"
    PROTOBUF_DEPENDENCY = "com.google.protobuf:protoc:${project.PROTOBUF_VERSION}"
    MAVEN_REPOSITORY_URL = 'http://maven.teamdev.com/repository/spine'
    MAVEN_SNAPSHOT_REPOSITORY_URL = 'http://maven.teamdev.com/repository/spine-snapshots'

    GUAVA_VERSION = "20.0"

    IS_WINDOWS = org.gradle.internal.os.OperatingSystem.current().isWindows()

    publishPlugin = "$rootDir/script/publish.gradle"
    credentialsPropertyFile = 'credentials.properties'
    projectsToPublish = ['gcd']
}

final String CREDENTIALS_LOCATION = 'credentials.properties'

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    }
}

def repositoryUserName = null
def repositoryUserPassword = null
final Properties properties = new Properties()
final File credentialsFile = file(CREDENTIALS_LOCATION)
if (credentialsFile.exists()) {
    properties.load(credentialsFile.newDataInputStream())
    repositoryUserName = properties.getProperty("user.name")
    repositoryUserPassword = properties.getProperty("user.password")
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    group = 'org.spine3'
    version = project.GAE_JAVA_VERSION

    repositories {
        mavenCentral()
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'com.google.protobuf'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        maven {
            url = "$MAVEN_REPOSITORY_URL"
        }
        maven {
            url = "$MAVEN_SNAPSHOT_REPOSITORY_URL"
        }
        mavenLocal()
    }

    dependencies {
        // when Spine can be used for evaluation in real projects.
        // Spine
        compile (group: 'org.spine3', name: 'spine-server-core', version: project.SPINE_VERSION, changing: true) {
            exclude group: 'com.google.protobuf', module: 'protobuf-lite'
            exclude group: 'io.grpc'
        }
        compile group: 'org.spine3', name: 'spine-client-core', version: project.SPINE_VERSION, changing: true

        // Spine for tests
        testCompile (group: 'org.spine3', name: 'spine-server-core', version: project.SPINE_VERSION, changing: true, classifier: 'test') {
            exclude group: 'com.google.protobuf', module: 'protobuf-lite'
            exclude group: 'io.grpc'
        }
        testCompile group: 'org.spine3', name: 'spine-client-core', version: project.SPINE_VERSION, changing: true, classifier: 'test'
        testCompile group: 'org.spine3', name: 'spine-testutil-core', version: project.SPINE_VERSION, changing: true

        // Guava
        compile group: 'com.google.guava', name: 'guava', version: GUAVA_VERSION

        // Findbugs
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'

        // SLF4J
        compile group: 'org.slf4j', name: 'slf4j-api', version: SLf4J_VERSION
        compile group: 'org.slf4j', name: 'slf4j-jdk14', version: SLf4J_VERSION

        // JUnit
        testCompile(group: 'junit', name: 'junit', version: '4.12') {
            exclude(module: 'hamcrest-core')
        }
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
        testCompile group: 'com.google.guava', name: 'guava-testlib', version: GUAVA_VERSION
    }

    protobuf {
        generatedFilesBaseDir = "$projectDir/generated"
        protoc {
            artifact = project.PROTOBUF_DEPENDENCY
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier "test"
    }

    publishing {
        repositories {
            maven {
                credentials {
                    username = "${repositoryUserName}"
                    password = "${repositoryUserPassword}"
                }
                url = project.MAVEN_REPOSITORY_URL
            }
        }
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination = "${buildDir}/reports/jacoco/report.xml"
        html.enabled = false
        csv.enabled = false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

task startDatastore {
    description "Starts local in-memory datastore using scripts form ./script folder."
    group "Build Setup"
}

startDatastore.doLast {
    // Start Datastore emulator with the CLI command
    "${IS_WINDOWS ? '' : '.'}${File.separatorChar}script${File.separatorChar}start-datastore.${IS_WINDOWS ? 'bat' : 'sh'}".execute()
}

tasks["check"].dependsOn startDatastore

apply from: publishPlugin
