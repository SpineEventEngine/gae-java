buildscript {

    // Define the versions of the library and its dependencies.
    // As long as `buildscript` section is always evaluated first, we need to apply
    // `ext.gradle` explicitly here.
    apply from: "ext.gradle"

    ext {
        googleMavenCentralMirror = 'https://maven-central.storage.googleapis.com'
        spineRepository = 'http://maven.teamdev.com/repository/spine'
        spineSnapshotsRepository = 'http://maven.teamdev.com/repository/spine-snapshots'
    }

    repositories {
        jcenter()
        maven { url = googleMavenCentralMirror }

        mavenCentral()
        mavenLocal()

        // Spine releases repository.
        maven { url = spineRepository }

        // Spine snapshots repository.
        maven { url = spineSnapshotsRepository }
    }
}

apply from: 'ext.gradle'

ext {
    publishPlugin = "$rootDir/scripts/publish.gradle"

    credentialsPropertyFile = 'credentials.properties'
    runsOnWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()

    projectsToPublish = ['datastore']
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    group = 'io.spine'
    version = project.spineGaeVersion

    repositories {
        mavenCentral()
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        jcenter()
        maven { url = googleMavenCentralMirror }

        mavenCentral()
        mavenLocal()

        // Spine releases repository.
        maven { url = spineRepository }

        // Spine snapshots repository.
        maven { url = spineSnapshotsRepository }
    }

    dependencies {
        compile group: 'io.spine', name: "spine-server",
                version: spineVersion, changing: true

        testCompile group: 'io.spine', name: "spine-testutil-server", version: spineVersion,
                changing: true
        testCompile group: 'io.spine', name: "spine-server", version: spineVersion,
                changing: true, classifier: "test"
        testCompile group: 'junit', name: 'junit', version: jUnitVersion
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestVersion
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
        testCompile group: 'com.google.guava', name: 'guava-testlib', version: guavaVersion

        testRuntime group: 'org.slf4j', name: 'slf4j-jdk14', version: slf4jVersion
    }

    javadoc {
        source = sourceSets.main.allJava
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier "test"
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from("$projectDir/build/docs/javadoc")
        classifier "javadoc"
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination = ("${buildDir}/reports/jacoco/report.xml" as File)
        html.enabled = false
        csv.enabled = false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

task startDatastore {
    description "Starts local in-memory datastore using scripts form ./scripts folder."
    group "Build Setup"
}

startDatastore.doLast {
    // Start Datastore emulator with the CLI command
    ".${File.separatorChar}scripts${File.separatorChar}start-datastore.${runsOnWindows ? 'bat' : 'sh'}".execute()
}

tasks["check"].dependsOn startDatastore

apply from: publishPlugin
