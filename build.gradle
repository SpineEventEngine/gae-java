project.ext {
    SPINE_VERSION = '0.6.0-SNAPSHOT';
    PROTOBUF_VERSION = '3.0.0';
    PROTOBUF_DEPENDENCY = "com.google.protobuf:protoc:${project.PROTOBUF_VERSION}";
    MAVEN_REPOSITORY_URL = 'http://maven.teamdev.com/repository/spine';
}

final String CREDENTIALS_LOCATION = 'credentials.properties';

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    }
}

def repositoryUserName = null
def repositoryUserPassword = null
final Properties properties = new Properties()
final File credentialsFile = file(CREDENTIALS_LOCATION)
if (credentialsFile.exists()) {
    properties.load(credentialsFile.newDataInputStream())
    repositoryUserName = properties.getProperty("user.name")
    repositoryUserPassword = properties.getProperty("user.password")
}

allprojects {

    apply plugin: 'java';
    apply plugin: 'maven';
    group = 'org.spine3.gae-java';
    version = '0.1';
}

subprojects {

    apply plugin: 'java';
    apply plugin: 'com.google.protobuf';
    apply plugin: 'maven-publish';

    sourceCompatibility = 1.7;
    targetCompatibility = 1.7;

    repositories {
        mavenCentral()
        maven {
            url = "$MAVEN_REPOSITORY_URL"
        }
        mavenLocal()
    }

    dependencies {

        // TODO:2015-11-19:alexander.litus: change Spine local dependency to Maven central repository dependency
        // when Spine can be used for evaluation in real projects.
        // Spine
        compile group: 'org.spine3', name: 'server', version: project.SPINE_VERSION, changing: true
        compile group: 'org.spine3', name: 'client', version: project.SPINE_VERSION, changing: true
        compile group: 'org.spine3', name: 'testutil', version: project.SPINE_VERSION, changing: true

        // Guava
        compile group: 'com.google.guava', name: 'guava', version: '19.0'

        // Findbugs
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'

        // SLF4J
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
        compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.21'

        // Protobuf
        compile group: 'com.google.protobuf', name: 'protobuf-java', version: project.PROTOBUF_VERSION
        compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: project.PROTOBUF_VERSION

        // JUnit
        testCompile(group: 'junit', name: 'junit', version: '4.12') {
            exclude(module: 'hamcrest-core')
        }
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    }

    protobuf {
        generatedFilesBaseDir = "$projectDir/generated"
        protoc {
            artifact = project.PROTOBUF_DEPENDENCY
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = "${group}"
                artifactId = "${project.name}"
                version = "${project.version}"

                from components.java

                artifact sourceJar;
            }
        }
    }

    publishing {
        repositories {
            maven {
                credentials {
                    username = "${repositoryUserName}";
                    password = "${repositoryUserPassword}";
                }
                url = project.MAVEN_REPOSITORY_URL;
            }
        }
    }
}

task readPublishingCredentials << {
    if (repositoryUserName == null || repositoryUserPassword == null) {
        throw new InvalidUserDataException("Please set up valid credentials. " +
                "Credentials should be set in ${CREDENTIALS_LOCATION} file in the project\'s root.");
    }
    println "Publishing build as ${repositoryUserName}";
}

task publish << {}

subprojects.each { final project ->
    final Set<Task> credentialsTasks = getTasksByName("readPublishingCredentials", false);
    project.getTasksByName("publish", false).each { final task ->
        task.dependsOn credentialsTasks;
    }
    publish.dependsOn project.getTasksByName("publish", false);
}
