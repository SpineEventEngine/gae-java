/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {

    // Define the versions of the library and its dependencies.
    // As long as `buildscript` section is always evaluated first, we need to apply
    // `ext.gradle` explicitly here.
    apply from: "ext.gradle"

    ext {
        googleMavenCentralMirror = 'https://maven-central.storage.googleapis.com'
        spineRepository = 'http://maven.teamdev.com/repository/spine'
        spineSnapshotsRepository = 'http://maven.teamdev.com/repository/spine-snapshots'
    }

    repositories {
        jcenter()
        maven { url = googleMavenCentralMirror }

        mavenCentral()
        mavenLocal()

        // Spine releases repository.
        maven { url = spineRepository }

        // Spine snapshots repository.
        maven { url = spineSnapshotsRepository }
    }

    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:$jUnitPlatformVersion"
    }
}

apply from: 'ext.gradle'

ext {
    publishPlugin = "$rootDir/scripts/publish.gradle"
    jacocoPlugin = "$rootDir/scripts/code-coverage.gradle"

    credentialsPropertyFile = 'credentials.properties'
    runsOnWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()

    projectsToPublish = ['datastore']
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    group = 'io.spine'
    version = project.spineGaeVersion

    apply from: "$rootDir/ext.gradle"

    repositories {
        mavenCentral()
    }
}

subprojects {
    project.ext {
        sourcesRootDir = "${projectDir}/src"

        generateDescriptorSetPlugin = "${rootDir}/scripts/generate-descriptor-set.gradle"
        protobufImportPlugin = "$rootDir/scripts/protobuf.gradle"
    }

    apply plugin: 'maven-publish'
    apply plugin: 'org.junit.platform.gradle.plugin'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        maven { url = googleMavenCentralMirror }

        mavenCentral()
        mavenLocal()

        // Spine releases repository.
        maven { url = spineRepository }

        // Spine snapshots repository.
        maven { url = spineSnapshotsRepository }
    }

    dependencies {
        compile group: 'io.spine', name: "spine-server", version: spineVersion, changing: true

        testCompile group: 'io.spine', name: "spine-testutil-server", version: spineVersion, changing: true
        testCompile group: 'io.spine', name: "spine-server", version: spineVersion, changing: true, classifier: "test"

        testCompile "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
        testRuntime "org.junit.vintage:junit-vintage-engine:${jUnitVersion}"

        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestVersion
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
        testCompile group: 'com.google.guava', name: 'guava-testlib', version: guavaVersion

        testRuntime group: 'org.slf4j', name: 'slf4j-jdk14', version: slf4jVersion
    }

    junitPlatform {
        platformVersion jUnitPlatformVersion

        logManager 'java.util.logging.LogManager'

        selectors {
            directory "${sourcesRootDir}/test/java"
            packages 'io.spine.server.storage.datastore', 'io.spine.server.datastore'
        }

        filters {
            engines {
                include 'junit-jupiter'
                include 'junit-vintage'
            }

            includeClassNamePatterns '.*Test', '.*Should'
        }
    }

    javadoc {
        source = sourceSets.main.allJava
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier = "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier = "test"
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from("$projectDir/build/docs/javadoc")
        classifier = "javadoc"
    }
}

task startDatastore {
    description = "Starts local in-memory datastore using scripts from ./scripts folder."
    group = "Build Setup"

    doLast {
        // Start Datastore emulator with the CLI command.
        ".${File.separatorChar}scripts${File.separatorChar}start-datastore.${runsOnWindows ? 'bat' : 'sh'}".execute()
    }
}

tasks["check"].dependsOn startDatastore

apply from: jacocoPlugin
apply from: publishPlugin
