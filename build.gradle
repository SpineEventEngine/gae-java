/*
 * Copyright 2020, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript { final scriptHandler ->

    // Define the versions of the library and its dependencies.
    // As long as `buildscript` section is always evaluated first, we need to apply
    // `version.gradle` explicitly here.
    apply from: "version.gradle"
    apply from: "$rootDir/config/gradle/dependencies.gradle"

    defaultRepositories(scriptHandler)

    dependencies {
        classpath deps.build.guava
        classpath (deps.build.gradlePlugins.errorProne) {
            exclude group: 'com.google.guava'
        }
        classpath deps.build.gradlePlugins.protobuf
        classpath "io.spine.tools:spine-model-compiler:$spineBaseVersion"
    }
}

apply from: 'version.gradle'

ext {
    credentialsPropertyFile = 'credentials.properties'

    projectsToPublish = ['datastore', 'stackdriver-trace', 'testutil-gcloud']
}

allprojects {
    apply plugin: 'jacoco'

    group = 'io.spine.gcloud'
    version = project.versionToPublish
}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'pmd'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    
    configurations {
        // Avoid collisions of Java classes defined both in `protobuf-lite` and `protobuf-java`
        runtime.exclude group: "com.google.protobuf", module: "protobuf-lite"
        testRuntime.exclude group: "com.google.protobuf", module: "protobuf-lite"

        all {
            resolutionStrategy {
                force deps.build.guava
                force deps.test.guavaTestlib
            }
        }
    }
    
    project.ext {
        sourcesRootDir = "$projectDir/src"
        generatedRootDir = "$projectDir/generated"

        generatedJavaDir = "$generatedRootDir/main/java"
        generatedTestJavaDir = "$generatedRootDir/test/java"

        generatedGrpcDir = "$generatedRootDir/main/grpc"
        generatedTestGrpcDir = "$generatedRootDir/test/grpc"

        generatedSpineDir = "$generatedRootDir/main/spine"
        generatedTestSpineDir = "$generatedRootDir/test/spine"

        testArtifactsScript = "$rootDir/scripts/test-artifacts.gradle"
        filterInternalJavadocsScript = "$rootDir/config/gradle/filter-internal-javadoc.gradle"
        updateDocsPlugin = "$rootDir/scripts/update-gh-pages.gradle"
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultRepositories(project)

    // Required to fetch `androidx.annotation:annotation:1.1.0`,
    // which is a transitive dependency of `com.google.cloud:google-cloud-datastore`.
    repositories {
        google()
    }

    dependencies {
        errorprone deps.build.errorProneCore
        errorproneJavac deps.build.errorProneJavac
        // For dependencies config. based on version of Java, see:
        //  https://github.com/epeee/junit-jupiter-extension-testing/blob/57b7ba75ab64ed8c229d2a5b14a954d6ae359189/gradle/errorprone.gradle

        implementation group: 'io.spine', name: "spine-server", version: spineCoreVersion

        testImplementation group: 'io.spine', name: "spine-testutil-server", version: spineCoreVersion
        testImplementation group: 'io.spine', name: "spine-server", version: spineCoreVersion, classifier: "test"

        testImplementation deps.test.junit5Api
        testImplementation deps.test.junit5Runner

        testImplementation deps.test.hamcrest
        testImplementation deps.test.guavaTestlib
    }

    // Apply the same IDEA module configuration for each of sub-projects.
    idea {
        module {
            generatedSourceDirs += file(generatedJavaDir)
            generatedSourceDirs += file(generatedGrpcDir)
            generatedSourceDirs += file(generatedSpineDir)
            generatedSourceDirs += file(generatedTestJavaDir)
            generatedSourceDirs += file(generatedTestGrpcDir)
            generatedSourceDirs += file(generatedTestSpineDir)
            
            testSourceDirs += file(generatedTestJavaDir)
            
            downloadJavadoc = true
            downloadSources = true

            iml {
                beforeMerged { final module ->
                    module.dependencies.clear()
                }
                whenMerged { final module ->
                    module.dependencies*.exported = true
                }
            }
        }
    }

    apply plugin: 'com.google.protobuf'
    apply plugin: 'io.spine.tools.spine-model-compiler'
    apply from: deps.scripts.modelCompiler
    apply from: deps.scripts.slowTests

    sourceSets {
        main {
            proto.srcDirs "$sourcesRootDir/main/proto"
            java.srcDirs generatedJavaDir, "$sourcesRootDir/main/java", generatedSpineDir
            resources.srcDirs "$generatedRootDir/main/resources"
        }
        test {
            proto.srcDirs "$sourcesRootDir/test/proto"
            java.srcDirs generatedTestJavaDir, "$sourcesRootDir/test/java", generatedTestSpineDir
            resources.srcDirs "$generatedRootDir/test/resources"
        }
    }

    task copyCredentials(type: Copy) {

        final def resourceDir = "$projectDir/src/test/resources"
        final def fileName = 'spine-dev.json'

        final def sourceFile = file("$rootDir/$fileName")

        from file(sourceFile)
        into file(resourceDir)
    }

    processTestResources.dependsOn copyCredentials

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    }

    apply from: deps.scripts.testOutput
    apply from: deps.scripts.javadocOptions
    apply from: deps.scripts.javacArgs
    apply from: deps.scripts.projectLicenseReport

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier = "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier = "test"
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from("$projectDir/build/docs/javadoc")
        classifier = "javadoc"
    }

    apply from: deps.scripts.pmd
}

apply from: deps.scripts.jacoco
apply from: deps.scripts.publish
apply from: deps.scripts.repoLicenseReport
apply from: deps.scripts.generatePom
