ext {
    publishPlugin = "$rootDir/script/publish.gradle"
    credentialsPropertyFile = 'credentials.properties'
    projectsToPublish = ['datastore']

    /**
     * A map of the Spine project IDs to their versions.
     */
    spineDependencies = ['spine-server': VERSION,
                         'spine-client': VERSION,
                         'spine-core': VERSION,
                         'spine-base': BASE_VERSION]
}

final String CREDENTIALS_LOCATION = 'credentials.properties'

buildscript {

    // Define the versions of the library and it's dependencies.
    // As long as `buildscript` section is always evaluated first, we need to apply
    // `ext.gradle` explicitly here.
    apply from: "ext.gradle"

    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    }
}

def repositoryUserName = null
def repositoryUserPassword = null
final Properties properties = new Properties()
final File credentialsFile = file(CREDENTIALS_LOCATION)
if (credentialsFile.exists()) {
    properties.load(credentialsFile.newDataInputStream())
    repositoryUserName = properties.getProperty("user.name")
    repositoryUserPassword = properties.getProperty("user.password")
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    group = 'io.spine'
    version = project.VERSION

    repositories {
        mavenCentral()
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'com.google.protobuf'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        maven {
            url = "$MAVEN_REPOSITORY_URL"
        }
        maven {
            url = "$MAVEN_SNAPSHOT_REPOSITORY_URL"
        }
        mavenLocal()
    }

    dependencies {
        // when Spine can be used for evaluation in real projects.
        // Spine
        spineDependencies.entrySet().each {
            dependOnSpine(dependencies, it.key, it.value, false)
        }

        dependOnSpine dependencies, 'spine-testutil-base', BASE_VERSION, true
        dependOnSpine dependencies, 'spine-testutil-client', VERSION, true
        dependOnSpine dependencies, 'spine-testutil-server', VERSION, true

        // Guava
        compile group: 'com.google.guava', name: 'guava', version: GUAVA_VERSION

        // Protobuf runtime
        compile group: 'com.google.protobuf', name: 'protobuf-java', version: PROTOBUF_VERSION
        compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: PROTOBUF_VERSION

        // Findbugs
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'

        // SLF4J
        compile group: 'org.slf4j', name: 'slf4j-api', version: SLf4J_VERSION
        compile group: 'org.slf4j', name: 'slf4j-jdk14', version: SLf4J_VERSION

        // JUnit
        testCompile(group: 'junit', name: 'junit', version: '4.12') {
            exclude(module: 'hamcrest-core')
        }
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
        testCompile group: 'com.google.guava', name: 'guava-testlib', version: GUAVA_VERSION
    }

    protobuf {
        generatedFilesBaseDir = "$projectDir/generated"
        protoc {
            artifact = project.PROTOBUF_DEPENDENCY
        }
    }

    javadoc {
        source = sourceSets.main.allJava
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier "test"
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from("$projectDir/build/docs/javadoc")
        classifier "javadoc"
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination = ("${buildDir}/reports/jacoco/report.xml" as File)
        html.enabled = false
        csv.enabled = false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

task startDatastore {
    description "Starts local in-memory datastore using scripts form ./script folder."
    group "Build Setup"
}

startDatastore.doLast {
    // Start Datastore emulator with the CLI command
    ".${File.separatorChar}script${File.separatorChar}start-datastore.${IS_WINDOWS ? 'bat' : 'sh'}".execute()
}

tasks["check"].dependsOn startDatastore

apply from: publishPlugin

/**
 * Adds a compile-time dependency on a Spine module.
 *
 * @param dependencyHandler the project dependency handler (basically {@code project.dependencies})
 * @param artifactId the ID of the Spine module artifact
 * @param version the Spine module version
 * @param testScope tag parameter: {@code true} if the dependency should be added only for the tests
 *                  (e.g. test utils modules`), {@code false} otherwise
 */
void dependOnSpine(final dependencyHandler,
                   final artifactId,
                   final version,
                   final boolean testScope) {
    final def excludes = {
        exclude group: 'com.google.protobuf', module: 'protobuf-lite'
        exclude group: 'io.grpc'
    }

    if (!testScope) {
        dependencyHandler.compile(group: 'io.spine',
                                  name: artifactId,
                                  version: version,
                                  changing: true,
                                  excludes)
        dependencyHandler.testCompile(group: 'io.spine',
                                      name: artifactId,
                                      version: version,
                                      classifier: 'test',
                                      changing: true,
                                      excludes)
    } else {
        dependencyHandler.testCompile(group: 'io.spine',
                                      name: artifactId,
                                      version: version,
                                      changing: true,
                                      excludes)
    }

}
