/*
 * Copyright 2018, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * This build script contains a Gradle plugin for JavaScript modules.
 *
 * <p>The plugin configures NPM tools execution and connects the JS assembly and test routines
 * with the Gradle execution process.
 *
 * <p>The plugin defines tasks for:
 * <ul>
 *     <li>downloading NPM dependencies -                   {@code installDependencies};
 *     <li>compile Protobuf into JavaScript -               {@code compileProtoToJs};
 *     <li>running tests NPM dependencies -                 {@code testJs} and {@code coverageJs};
 *     <li>publishing NPM artifacts into the NPM registry - {@code publishJs};
 *     <li>linking the module to the local NPM registry -   {@code link}
 * </ul>
 *
 * <p>Most of the tasks launch a separate process which runs an NPM CLI command, so it's necessary
 * that the NPM command line tool is installed.
 *
 * <p>In order to publish the NPM module, it is required that the {@code NPM_TOKEN} environment
 * variable is set to a valid NPM auth token. If the token is not set, a dummy value is added to
 * the NPM execution process, which is sufficient for the local development.
 */

apply from: "$rootDir/scripts/js-cli.gradle"

ext {
    JAVA_SCRIPT_TASK_GROUP = 'JavaScript'

    workDirectory = "$buildDir/node-module/"
    publicationDirectory = "$buildDir/npm-publication/"

    assemblyComponents = ['package.json', 'proto', 'src', 'test', '.babelrc']
    publicationComponents = ['package.json', 'proto/main/js', 'src', '.npmrc']

    npm = { final String... command ->
        ext.executeNpm(workDirectory as File, command)
    }
}

/**
 * Compiles Protobuf sources into JavaScript.
 *
 * <p>This is a lifecycle task. It performs no action but triggers all the tasks which perform
 * the compilation.
 */
task compileProtoToJs {
    description = "Compiles Protobuf sources into JavaScript."
}

protobuf {
    generatedFilesBaseDir = "$projectDir/proto"
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    generateProtoTasks {
        all().each { final task ->
            task.builtins {
                // Do not use java builtin output in this project.
                remove java

                // For information on JavaScript code generation please see
                // https://github.com/google/protobuf/blob/master/js/README.md
                js {
                    option "import_style=commonjs"
                }
            }
            compileProtoToJs.dependsOn task
        }
    }
}

/**
 * Processes a `package.json` file line.
 *
 * <p>Replaces the templates used in the package descriptor with the actual values.
 *
 * @param line the line to process
 * @return the processed line
 */
String filterPackageDescriptor(final String line) {
    final Map<String, String> replacements = [
            '\\$PACKAGE_VERSION'         : ext.spineVersion,
            '\\$PACKAGE_PROTOBUF_VERSION': '^3.5.0',
            '\\$PACKAGE_TEST'            : 'mocha --require babel-polyfill --require babel-register --recursive \\$NODE_DEBUG_OPTION --exit --full-trace ./test'
    ]

    def result  = line
    replacements.each {
        result = result.replaceAll(it.key, it.value)
    }
    return result
}

/**
 * Copies the module sources from the project directory to an isolated working directory, where
 * the module is built and tested.
 */
task copyModuleSources(type: Copy) {
    from fileTree(projectDir).include {
        final def path = it.path
        for (final def branch in assemblyComponents) {
            if (path.startsWith(branch)) {
                return true
            }
        }
        return false
    }
    into workDirectory

    filter { filterPackageDescriptor(it) }

    dependsOn compileProtoToJs
}

/**
 * Installs the module dependencies using the `npm install` command.
 */
task installDependencies {
    group = JAVA_SCRIPT_TASK_GROUP
    description = 'Installs the JavaScript dependencies.'

    inputs.files "$projectDir/package.json"
    outputs.files "$projectDir/node_modules"

    dependsOn copyModuleSources

    doLast {
        npm 'install'
    }

    outputs.upToDateWhen { false }
}

/**
 * Assembles the JS sources.
 *
 * This task is an analog of `build` for JS.
 *
 * To include a task into the JS build, depend `buildJs` onto that task.
 */
task buildJs {
    group = JAVA_SCRIPT_TASK_GROUP
    description = "Assembles the JavaScript source files."

    dependsOn installDependencies, compileProtoToJs
}

/**
 * Copies the NPM publication files into a temporary directory which they are published from.
 */
task prepareJsPublication(type: Copy) {
    group = JAVA_SCRIPT_TASK_GROUP
    description = 'Prepares the NPM package for publish.'

    from publicationComponents.collect {
        final def file = "$projectDir/$it" as File
        if (!file.exists()) {
            return null
        } else {
            return file
        }
    }.findAll { it != null }
    into publicationDirectory
    exclude "test"

    filter { filterPackageDescriptor(it) }

    dependsOn buildJs
}

/**
 * Publishes the NPM package locally with `npm link`.
 */
task link {
    group = JAVA_SCRIPT_TASK_GROUP
    description = "Publishes the NPM package locally."

    doLast {
        executeNpm(publicationDirectory as File, 'link')
    }

    dependsOn prepareJsPublication
}

/**
 * Publishes the NPM package with `npm publish`.
 */
task publishJs {
    group = JAVA_SCRIPT_TASK_GROUP
    description = 'Publishes the NPM package.'

    doLast {
        executeNpm(publicationDirectory as File, 'publish')
    }

    dependsOn prepareJsPublication
}

/**
 * Runs the JavaScript tests.
 *
 * <p>The tests connect to the `spine-dev` GAE application and perform networking. Avoid running
 * the JS tests when not necessary.
 */
task testJs {
    group = JAVA_SCRIPT_TASK_GROUP
    description = 'Runs the JS tests.'

    doLast {
        npm 'run', 'test'
    }

    dependsOn buildJs
}

/**
 * Runs the JavaScript tests and collects the code coverage.
 *
 * <p>The tests connect to the `spine-dev` GAE application and perform networking. Avoid running
 * the JS tests when not necessary.
 */
task coverageJs {
    group = JAVA_SCRIPT_TASK_GROUP
    description = 'Runs the JS tests and collects the code coverage info.'

    doLast {
        npm 'run', 'coverage'
    }

    dependsOn buildJs
}

rootProject.codeCoverageReport.dependsOn coverageJs

build.dependsOn buildJs
publish.dependsOn publishJs
